
#include "nodelet/nodelet.h"
#include <camera_calibration_parsers/parse.h>
#include <std_msgs/UInt64.h>
#include <sensor_msgs/fill_image.h>
#include <sensor_msgs/image_encodings.h>
#include <thread>
#include "vcam/vcam_nodelet.hpp"

namespace vio_cam
{
const std::string VCamNodelet::DEFAULT_FRAME_NAME = "camera";
const std::string VCamNodelet::DEFAULT_CAMERA_NAME = "camera";
const std::string VCamNodelet::DEFAULT_CAMERA_TOPIC = "image_raw";
const std::string VCamNodelet::DEFAULT_COLOR_MODE = "mono8";

void VCamNodelet::onInit(){
    ros::NodeHandle &nh = getNodeHandle();
    // ros::NodeHandle &local_nh = getPrivateNodeHandle();
    // image_transport::ImageTransport it(nh);
    //TODO:
    // loadIntrinsicsFile();
    // VCamNodelet::dev =Devices();
    // dev.list_devices();
    // dev.get_camera(0, &cam_name, &video_node);
    // dev_node_name += video_node;
    // ROS_INFO("dev_node_name %s", dev_node_name.c_str());
    // std::int32_t is_err = connectCam();
    // local_nh.param<std::string>("camera_topic", cam_topic_, DEFAULT_CAMERA_TOPIC);





    return;
}
std::int32_t  VCamNodelet::connectCam(){
    std::int32_t is_err=0;

    // cam.set_camera_name(cam_name, video_node);
    // cam.open_device(dev_node_name.c_str());
    // is_err = cam.cam_init();
    //TODO: set cam configs here

    
    return is_err;
}
std::int32_t  VCamNodelet::disconnectCam(){
    return 1;
}
void VCamNodelet::frameGrabLoop(){
    return;
}
bool VCamNodelet::fillMsgData(sensor_msgs::Image& img) const {
    return true;
}

ros::Time VCamNodelet::getImageTimestamp(){
    return ros::Time::now();
}

ros::Time VCamNodelet::getImageTickTimestamp() {
    return ros::Time::now();
}

}

#include <pluginlib/class_list_macros.h>
PLUGINLIB_EXPORT_CLASS(vio_cam::VCamNodelet, nodelet::Nodelet)